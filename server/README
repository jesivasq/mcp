MCP Server
==========

Data Model
----------

                    Alarms
                        \
Sensors ==> Abode --> state machine ---,
                ||           \ /        \
                ++============o======> Actuators
                |                         |
                +-- Filesystem -----------+
                |
                +-- Database

Model->Controller->View
Model: Sensors + Abode
View:  Actuators
Controller: All the rest.

Sensor data gets collected in the Abode graph, transformed and gated by the controller, then realized in the Actuators.
There are also a number of cutouts to snoop the state, displaying it and allowing direct control, as well as logging
data to a database for archival purposes.

Network Topology
----------------

Is trivial:
                  ,,,,,,,,,,,,,,,,,
 ,,,,,,,,,       |      MCP Server |
| Devices | ---- | network.Bus     |
 '''''''''       |                 |
                  '''''''''''''''''

Sensors   : ZMQ publish sockets. The server is configured to subscribe to these.
Actuators : ZMQ reply sockets. The server is configured to request from these.

The network serves as a bus for data collection and distribution of the server's wishes, not as
ground truth. Some devices are not even on the network because they expose an interface the server
can talk to directly, like the HueBridge; adding a second network layer in these cases would be
silly.

This is a substantially different architecture from e.g. SkyNet, which treats the devices as truth
and the intelligence is just another device on the network. With MCP we want to minimize the
latency of state queries and event distribution so that we can do more sophisticated and
interactive actuator updates.

Of particular note, the Sensors and Actuators can participate in multiple networks
at once. This is useful because we can quiesce the master server and use the full
network locally from our development box.


Data Model
----------

Abode - a scene graph of the living space that provides for connectivity queries and tracks the
values of properties. Property changes trigger events, allowing the Abode representation to be both
the central authority for queries of the world's state, and the source of notifications of state
changes of that state.

Devices - a list of devices that we are communicating with either over the ZMQ network bus or via
HTTP requests, or whatever. A device is just code. The sensors (and sometimes the response
from an actuator update) provide inputs to the abode's state. In general the sensors feed data into
the abode, although lookups are possible and sometimes necessary to disambiguate sensor readings.
The device list can also feed events directly to the behaviors, e.g. to support behaviors that are
not tied to specific readings, but to the state of all readings in a room and need to re-query the
abode at each sensor change or to change the current behavior.

Behaviors - listens to the state of the world and emits actuator events to respond to state
changes. There are many behaviors and they are swappable at runtime. In general, coming up with a
single behavior which supports all user interactions fluidly is basically impossible. E.g. If the
user normal sleeps until 9AM, but needs to get up early to go to the airport, it would be very bad
if she were unable to turn the lights on. With the ability to swap behaviors, she can just change
the active behavior to "just turn the damned lights on", as needed, instead of making the base
behavior understand flight times, vacations, etc.
